import { SongGenreTypes, SongSubGenreTypes, SongBankTypes, SongDrumBankTypes } from '../locale'
import {
    GetDataReturnValues,
    GetDataValueOptions,
    GetDataValueTypes,
} from './core/get'

/**
 * Interface for a parsed song `Object`.
 */
export interface DTADocument extends DTADocumentMethods {
    content: DTAContentDocument
    custom?: DTACustomSongAttributes
}

export interface DTADocumentMethods {
    get<V extends GetDataValueTypes, O extends GetDataValueOptions<V>>(
        value: V,
        options?: O
    ): GetDataReturnValues<V, O>
    stringify(): string
}

export interface DTAContentDocument {
    id: string
    name: string
    artist: string
    master: boolean
    song_id: number | string
    songname: string
    tracks_count: number[]
    pans: number[]
    vols: number[]
    vocal_parts: 0 | 1 | 2 | 3
    mute_volume?: number
    mute_volume_vocals?: number
    hopo_threshold?: number
    bank: SongBankTypes
    drum_bank: SongDrumBankTypes
    anim_tempo: 16 | 32 | 64
    band_fail_cue?:
    | 'band_fail_rock.cue'
    | 'band_fail_vintage.cue'
    | 'band_fail_heavy.cue'
    | 'band_fail_electro.cue'
    | 'band_fail_rock_keys.cue'
    | 'band_fail_vintage_keys.cue'
    | 'band_fail_heavy_keys.cue'
    | 'band_fail_electro_keys.cue'
    song_scroll_speed?:
    | 1700
    | 1850
    | 2000
    | 2150
    | 2300
    | 2450
    | 2600
    | 2750
    | 3000
    preview: [number, number]
    song_length: number
    rank_band: number
    rank_drum?: number
    rank_bass?: number
    rank_guitar?: number
    rank_vocals?: number
    rank_keys?: number
    rank_real_bass?: number
    rank_real_guitar?: number
    rank_real_keys?: number
    solo?: ('drum' | 'bass' | 'guitar' | 'keys' | 'vocal_percussion')[]
    tuning_offset_cents?: number
    guide_pitch_volume?: number
    encoding?: 'latin1' | 'utf8' | string
    format?: 10 | number
    version?: 30 | number
    game_origin: 'rb3_dlc' | 'ugc_plus' | string
    rating: 1 | 2 | 3 | 4
    genre: SongGenreTypes
    sub_genre?: SongSubGenreTypes
    vocal_gender: 'male' | 'female'
    year_released: number
    year_recorded?: number
    album_art: boolean
    album_name: string
    album_track_number?: number
    vocal_tonic_note?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11
    song_tonality?: 0 | 1
    song_key?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11
    real_guitar_tuning?: [number, number, number, number, number, number]
    real_bass_tuning?: [number, number, number, number]
}

export interface DTACustomSongAttributes {
    /** The author of the song. */
    author?: string
    /** An `Array` with the languages of the song. */
    languages?: string[]
    /** Tells if the song has separate vocal and backing stems.*/
    karaoke?: boolean
    /** Tells if the song has separate audio stems. */
    multitrack?: boolean
    /** Tells if the song is a 2x Kick Pedal song. */
    doubleKick?: boolean
    /** Tells if the song is a conversion from another game. */
    convert?: boolean
    /** Tells if the song has rhythm guitar charted on the Keys track. */
    rhythmOnKeys?: boolean
    /** Tells if the song has rhythm guitar charted on the Bass track. */
    rhythmOnBass?: boolean
    /** Tells if the song has EMH autogenerated by CAT. */
    CATemh?: boolean
    /** Tells if the song only has Expert difficulty charted. */
    expertOnly?: boolean
}
