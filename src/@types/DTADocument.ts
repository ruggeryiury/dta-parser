import { DTAGetDataTypes, DTAGetDataOptions, DTAGetDataReturn } from './getDTA'

/**
 * Type interface for a `DTADocument` object.
 */
export interface DTADocument extends DTADocumentMethods {
    /**
     * A raw representation of a DTA file content.
     * - - - -
     */
    rawContent: DTARawContentDocument
    /**
     * Custom song attributes generated by MAGMA when the song is compiled.
     * - - - -
     */
    customContent?: DTACustomSongAttributes
}

export interface DTADocumentMethods {
    /**
     * Stringifies this `DTAContent` back to .dta file contents.
     * @since v0.1.3
     */
    stringify(): string
    /**
     * Returns the desired information from the parsed song.
     * @since v0.1.1
     */
    get<T extends DTAGetDataTypes, O extends DTAGetDataOptions<T>>(
        /**
         * Any information from the song you want to be returned.
         * - - - -
         */
        data: T,
        /**
         * Customized options for the function. if the parameter is
         * `undefined`, it means there's no available options.
         * - - - -
         */
        options?: O
    ): DTAGetDataReturn<T, O>
}

export interface DTARawContentDocument
    extends DTARawContentRequired,
        Partial<DTARawContentOptional> {}

export interface DTARawContentRequired {
    /**
     * The song name unique string ID.
     */
    songname: string
    /**
     * The name of the song.
     */
    name: string
    /**
     * The artist/band name.
     */
    artist: string
    /**
     * Tells if the song is a _master_ recording.
     *
     * @default true
     */
    master: boolean
    /**
     * An `Array` with the track count for each instrument.
     */
    tracks_count: number[]
    /**
     * An `Array` with all tracks panning values.
     */
    pans: number[]
    /**
     * An `Array` with all tracks volume values.
     */
    vols: number[]
    /**
     * The quantity of vocal parts.
     */
    vocal_parts: 0 | 1 | 2 | 3
    /**
     * Number value (in decibels) that controls the volume reduction of a stem when the player misses notes/fails out.
     *
     * **It can be a positive number, or lower than -96.**
     * - - - -
     * This is a left over from _The Beatles: Rock Band_ (to hide artifacts of stem isolation).
     *
     * If your song has 'fake' stems produced by frequency banding, you can use this to make the game mute the stems less harshly when players make mistakes or fail, in order to prevent the overall sound from becoming too deadened.
     *
     * The singer has a separate setting from the rest of the instruments (it uses the `mute_volume_vocals`).
     *
     * @default -96
     */
    mute_volume: number
    /**
     * Number value (in decibels) that controls the volume reduction of a vocal stem when the player fails out.
     *
     * **It can be a positive number, or lower than -96.**
     * - - - -
     * This is a left over from _The Beatles: Rock Band_ (to hide artifacts of stem isolation).
     *
     * If your song has 'fake' stems produced by frequency banding, you can use this to make the game mute the stems less harshly when players make mistakes or fail, in order to prevent the overall sound from becoming too deadened.
     *
     * @default -12
     */
    mute_volume_vocals: number
    /** The HO/PO threshold value.
     *
     * This value changes the behavior of Auto-HO/PO notes.
     *
     * @default 170
     */
    hopo_threshold: number
    /**
     * This controls the speed of the vocals/harmonies track.
     *
     * Higher values means slower scrolling. Lower values means faster scrolling.
     * - - - -
     * `3000` => Comatose.
     * - - - -
     * `2750` => Slower.
     * - - - -
     * `2600` => Slow.
     * - - - -
     * `2450` => Medium Slow.
     * - - - -
     * `2300` => Normal.
     * - - - -
     * `2150` => Medium Fast.
     * - - - -
     * `2000` => Fast.
     * - - - -
     * `1850` => Faster.
     * - - - -
     * `1700` => Crazy.
     *
     * @default 2300 => Normal speed
     */
    song_scroll_speed:
        | 1700
        | 1850
        | 2000
        | 2150
        | 2300
        | 2450
        | 2600
        | 2750
        | 3000
    /** The audio cue used on vocal percussion.
     * - - - -
     * * `sfx/tambourine_bank.milo` => Uses a tambourine as
     * vocal percussion.
     * - - - -
     * * `sfx/cowbell_bank.milo` => Uses a cowbell as vocal
     * percussion.
     * - - - -
     * * `sfx/handclap_bank.milo` => Hand clapping as vocal
     * percussion.
     * - - - -
     * * `sfx/cowbell3_bank.milo` => Uses a cowbell as vocal
     * percussion. Alternative cowbell uses on a few on-disc
     * Rock Band 3 songs.
     *
     * @default 'sfx/tambourine_bank.milo' => Tambourine
     */
    bank:
        | 'sfx/tambourine_bank.milo'
        | 'sfx/cowbell_bank.milo'
        | 'sfx/handclap_bank.milo'
        | 'sfx/cowbell3_bank.milo'
    /** The drum audio cue used on drums (like Freestyle Mode).
     * - - - -
     * * `sfx/kit01_bank.milo` => Hard Rock Kit.
     * - - - -
     * * `sfx/kit02_bank.milo` => Arena Kit.
     * - - - -
     * * `sfx/kit03_bank.milo` => Vintage Kit.
     * - - - -
     * * `sfx/kit04_bank.milo` => Trashy Kit.
     * - - - -
     * * `sfx/kit05_bank.milo` => Electronic Kit.
     *
     * @default 'sfx/kit01_bank.milo' => Hard Rock Kit
     */
    drum_bank:
        | 'sfx/kit01_bank.milo'
        | 'sfx/kit02_bank.milo'
        | 'sfx/kit03_bank.milo'
        | 'sfx/kit04_bank.milo'
        | 'sfx/kit05_bank.milo'
    /**
     * The animation tempo, based on overall BPM.
     * - - - -
     * * `16` => Slow animation tempo, for songs under 100BPM.
     * - - - -
     * * `32` => Medium animation tempo, for songs between 100-160BPM.
     * - - - -
     * * `64` => Fast animation tempo, for songs over 160BPM.
     *
     * @default 32 => Medium
     */
    anim_tempo: 16 | 32 | 64
    /** The song length (in milliseconds). */
    song_length: number
    /** An `Array` with preview starting and ending time (in milliseconds). */
    preview: [number, number]
    /** Ranking for Band */
    rank_band: number
    /** The song's genre. */
    genre: keyof DTAGenreTypes
    /**
     * The gender of the lead vocalist.
     *
     * @default 'male'
     */
    vocal_gender: 'male' | 'female'
    version: number
    format: number
    /** A `boolean` value that tells if the custom has an album artwork file to display. */
    album_art: boolean
    /** The year the song was released. */
    year_released: number
    /** The rating of the song.
     * - - - -
     * * `1` => Family Friendly
     * - - - -
     * * `2` => Supervision Recommended
     * - - - -
     * * `3` => Mature Content
     * - - - -
     * * `4` => No Rating
     *
     * @default 4 => No Rating
     * */
    rating: 1 | 2 | 3 | 4
    /** The sub-genre of the song. */
    sub_genre: keyof DTASubGenreTypes
    /** An unique song ID. Generally it's a number-only
     * ID. */
    song_id: string
    /** The quantity of tuning offset of the recording
     * (in cents). */
    tuning_offset_cents: number
    /**
     *
     * @default -3
     */
    guide_pitch_volume: number
    /** The game's origin.
     *
     * Custom songs uses `ugc_plus` (it appears on the game's filtering
     * system as `Rock Band Network`, and `Custom Songs` on RB3DX).
     *
     * @default 'ugc_plus'
     */
    game_origin: string
    encoding: string
    /** The name of the album. */
    album_name: string
    /** The track number of the song, related to the album. */
    album_track_number: number
}

export interface DTARawContentOptional {
    /** Ranking for Drums and PRO Drums. */
    rank_drum: number
    /** Ranking for Guitar. */
    rank_guitar: number
    /** Ranking for Bass. */
    rank_bass: number
    /** Ranking for Solo Vocals and Harmonies. */
    rank_vocals: number
    /** Ranking for Keys. */
    rank_keys: number
    /** Ranking for PRO Keys. */
    rank_real_keys: number
    /** Ranking for PRO Guitar. */
    rank_real_guitar: number
    /** Ranking for PRO Bass. */
    rank_real_bass: number
    /** An `Array` with each instrument flag that
     * has solo sessions. */
    solo: DTASoloFlagsTypes[]
    /** The year the song was recorded, this is used
     * on subsequent/alternative studio versions and
     * live performances. */
    year_recorded: number
    /** The vocal tonic note of the song,
     * used on the Vocal HUD and PRO modes
     * (if no `song_key` is specified to override it).
     *
     * Must be a `number` from 0 `C` to 11 `B`. */
    vocal_tonic_note: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11
    /** The song's tonality.
     * - - - -
     * * `0` => Major.
     * - - - -
     * * `1` => Minor. */
    song_tonality: 0 | 1
    /**
     * The song's key signature. It overrides the
     * `vocal_tonic_note` for PRO modes.
     *
     * This is generally used when the instrumental
     * part starts before the vocal, and when the vocalist
     * sings only when the whole song's key signature changes.
     *
     * `vocal_tonic_note` will only have effect on the Vocal HUD.
     *
     * Must be a `number` from 0 `C` to 11 `B`. */
    song_key: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11
    /** An `Array` with each string tuning for PRO Guitar. */
    real_guitar_tuning: [number, number, number, number, number, number]
    /** An `Array` with each string tuning for PRO Bass. */
    real_bass_tuning: [number, number, number, number]
}

export type DTASoloFlagsTypes =
    | 'guitar'
    | 'bass'
    | 'drum'
    | 'keys'
    | 'vocal_percussion'

export interface DTACustomSongAttributes {
    /** The author of the song. */
    author?: string
    /** An `Array` with the languages of the song. */
    languages?: string[]
    /** Tells if the song has separate vocal and backing stems.*/
    karaoke?: boolean
    /** Tells if the song has separate audio stems. */
    multitrack?: boolean
    /** Tells if the song is a 2x Kick Pedal song. */
    doubleKick?: boolean
    /** Tells if the song is a conversion from another game. */
    convert?: boolean
    /** Tells if the song has rhythm guitar charted on the Keys track. */
    rhythmOnKeys?: boolean
    /** Tells if the song has rhythm guitar charted on the Bass track. */
    rhythmOnBass?: boolean
    /** Tells if the song has EMH autogenerated by CAT. */
    CATemh?: boolean
    /** Tells if the song only has Expert difficulty charted. */
    expertOnly?: boolean
}

export interface DTAGenreTypes {
    /** Alternative. */
    alternative: string
    /** Blues. */
    blues: string
    /** Classical. */
    classical: string
    /** Classic Rock. */
    classicrock: string
    /** Country. */
    country: string
    /** Emo. */
    emo: string
    /** Fusion. */
    fusion: string
    /** Glam. */
    glam: string
    /** Grunge. */
    grunge: string
    /** Hip-Hop/Rap. */
    hiphoprap: string
    /** Indie Rock. */
    indierock: string
    /** Inspirational. */
    inspirational: string
    /** Jazz. */
    jazz: string
    /** J-Rock. */
    jrock: string
    /** Latin. */
    latin: string
    /** Metal. */
    metal: string
    /** New Wave. */
    new_wave: string
    /** Novelty. */
    novelty: string
    /** Nu-Metal. */
    numetal: string
    /** Pop/Dance/Electronic. */
    popdanceelectronic: string
    /** Pop-Rock. */
    poprock: string
    /** Prog. */
    prog: string
    /** Punk. */
    punk: string
    /** R&B/Soul/Funk. */
    rbsoulfunk: string
    /** Reggae/Ska. */
    reggaeska: string
    /** Rock. */
    rock: string
    /** Southern Rock. */
    southernrock: string
    /** World. */
    world: string
    /** Other. */
    other: string
}

export interface DTASubGenreTypes {
    /** Alternative. */
    subgenre_alternative: string
    /** College. */
    subgenre_college: string
    /** Other. */
    subgenre_other: string
    /** Acoustic. */
    subgenre_acoustic: string
    /** Chicago. */
    subgenre_chicago: string
    /** Classic. */
    subgenre_classic: string
    /** Contemporary. */
    subgenre_contemporary: string
    /** Country. */
    subgenre_country: string
    /** Delta. */
    subgenre_delta: string
    /** Electric. */
    subgenre_electric: string
    /** Classical. */
    subgenre_classical: string
    /** Classic Rock. */
    subgenre_classicrock: string
    /** Bluegrass. */
    subgenre_bluegrass: string
    /** Honky Tonk. */
    subgenre_honkytonk: string
    /** Outlaw. */
    subgenre_outlaw: string
    /** Traditional Folk. */
    subgenre_traditionalfolk: string
    /** Emo. */
    subgenre_emo: string
    /** Fusion. */
    subgenre_fusion: string
    /** Glam. */
    subgenre_glam: string
    /** Goth. */
    subgenre_goth: string
    /** Grunge. */
    subgenre_grunge: string
    /** Alternative Rap. */
    subgenre_alternativerap: string
    /** Gangsta. */
    subgenre_gangsta: string
    /** Hardcore Rap. */
    subgenre_hardcorerap: string
    /** Hip Hop. */
    subgenre_hiphop: string
    /** Old School Hip Hop. */
    subgenre_oldschoolhiphop: string
    /** Rap. */
    subgenre_rap: string
    /** Trip Hop. */
    subgenre_triphop: string
    /** Underground Rap. */
    subgenre_undergroundrap: string
    /** Indie Rock. */
    subgenre_indierock: string
    /** Lo-fi. */
    subgenre_lofi: string
    /** Math Rock. */
    subgenre_mathrock: string
    /** Noise. */
    subgenre_noise: string
    /** Post Rock. */
    subgenre_postrock: string
    /** Shoegazing. */
    subgenre_shoegazing: string
    /** Inspirational. */
    subgenre_inspirational: string
    /** Acid Jazz. */
    subgenre_acidjazz: string
    /** Experimental. */
    subgenre_experimental: string
    /** Ragtime. */
    subgenre_ragtime: string
    /** Smooth. */
    subgenre_smooth: string
    /** J-Rock. */
    subgenre_jrock: string
    /** Latin. */
    subgenre_latin: string
    /** Black. */
    subgenre_black: string
    /** Core. */
    subgenre_core: string
    /** Death. */
    subgenre_death: string
    /** Hair. */
    subgenre_hair: string
    /** Industrial. */
    subgenre_industrial: string
    /** Metal. */
    subgenre_metal: string
    /** Power. */
    subgenre_power: string
    /** Prog. */
    subgenre_prog: string
    /** Speed. */
    subgenre_speed: string
    /** Thrash. */
    subgenre_thrash: string
    /** Dark Wave. */
    subgenre_darkwave: string
    /** Electroclash. */
    subgenre_electroclash: string
    /** New Wave. */
    subgenre_new_wave: string
    /** Synthpop. */
    subgenre_synth: string
    /** Novelty. */
    subgenre_novelty: string
    /** Nu-Metal. */
    subgenre_numetal: string
    /** Ambient. */
    subgenre_ambient: string
    /** Breakbeat. */
    subgenre_breakbeat: string
    /** Chiptune. */
    subgenre_chiptune: string
    /** Dance. */
    subgenre_dance: string
    /** Downtempo. */
    subgenre_downtempo: string
    /** Dub. */
    subgenre_dub: string
    /** Drum and Bass. */
    subgenre_drumandbass: string
    /** Electronica. */
    subgenre_electronica: string
    /** Garage. */
    subgenre_garage: string
    /** Hardcore Dance. */
    subgenre_hardcoredance: string
    /** House. */
    subgenre_house: string
    /** Techno. */
    subgenre_techno: string
    /** Trance. */
    subgenre_trance: string
    /** Pop. */
    subgenre_pop: string
    /** Soft Rock. */
    subgenre_softrock: string
    /** Teen. */
    subgenre_teen: string
    /** Prog Rock. */
    subgenre_progrock: string
    /** Dance Punk. */
    subgenre_dancepunk: string
    /** Hardcore. */
    subgenre_hardcore: string
    /** Disco. */
    subgenre_disco: string
    /** Funk. */
    subgenre_funk: string
    /** Motown. */
    subgenre_motown: string
    /** Rhythm and Blues. */
    subgenre_rhythmandblues: string
    /** Soul. */
    subgenre_soul: string
    /** Reggae. */
    subgenre_reggae: string
    /** Ska. */
    subgenre_ska: string
    /** Arena. */
    subgenre_arena: string
    /** Blues. */
    subgenre_blues: string
    /** Folk Rock. */
    subgenre_folkrock: string
    /** Hard Rock. */
    subgenre_hardrock: string
    /** Psychedelic. */
    subgenre_psychadelic: string
    /** Rock. */
    subgenre_rock: string
    /** Rockabilly. */
    subgenre_rockabilly: string
    /** Rock and Roll. */
    subgenre_rockandroll: string
    /** Surf. */
    subgenre_surf: string
    /** Southern Rock. */
    subgenre_southernrock: string
    /** World. */
    subgenre_world: string
    /** A capella. */
    subgenre_acapella: string
    /** Contemporary Folk. */
    subgenre_contemporaryfolk: string
    /** Oldies. */
    subgenre_oldies: string
}

export type DTARankPartTypes =
    | 'band'
    | 'drum'
    | 'bass'
    | 'guitar'
    | 'vocals'
    | 'keys'
    | 'real_bass'
    | 'real_guitar'
    | 'real_keys'
