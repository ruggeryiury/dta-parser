export interface DTADocument {
    /** A raw representation of a DTA file content. */
    rawContent: DTARawContentDocument
    /** Custom song attributes generated by MAGMA when
     * the song is compiled. */
    customContent?: DTACustomSongAttributes
    /** Returns the desired information from the parsed song file.
     * @param data Any information from the parsed song file you want.
     * @param options
     * @since v0.1.1
     */
    getData<T extends DTAGetDataTypes>(
        data: T,
        options?: DTAGetDataOptions<T>
    ): string
    /** Retuns a new `DTADocument` with specified content changed.
     * @param options The values you want to change.
     * @since v0.1.1
     */
    updateSongMetadata(options: Partial<DTARawContentDocument>): DTADocument
}
export type DTAGetDataTypes =
    | 'songname'
    | 'name'
    | 'artist'
    | 'genre'
    | 'subGenre'

export type DTAGetDataOptions<T extends DTAGetDataTypes> = T extends
    | 'name'
    | 'artist'
    ? DTAGetDataNameOptions
    : T extends 'genre' | 'subGenre'
    ? DTAGetDataGenreOptions
    : never
export interface DTAGetDataNameOptions {
    /** You can specify how the leading article will be
     * placed on the string.
     * - - - -
     * * `emit`: Default option. Will return the whole
     * name/artist as it is. Ex.: ``An Example`` => `An Example`.
     * - - - -
     * * `omit`: Will return the name/artist with the
     * leading article ommited. Ex.: `An Example` => `Example`.
     * - - - -
     * * `trailing`: Will return the name/artist with the
     * leading article on the end of the string, separated with
     * a comma. Ex.: `An Example` => `Example, An`.
     */
    leadingArticle?: 'emit' | 'omit' | 'trailing'
}

export interface DTAGetDataGenreOptions {
    /** Genres and sub-genres are kept on any `.dta` as raw
     * string codes for the game `locale` files. By setting
     * this to `true`, it will return this raw string code
     * instead of the processed raw string code.
     */
    raw?: boolean
}

export interface DTARawContentDocument
    extends DTARawContentRequired,
        Partial<DTARawContentOptional> {}

export interface DTARawContentRequired {
    /** The song name unique string ID. */
    songname: string
    /** The name of the song. */
    name: string
    /** The artist/band name. */
    artist: string
    /** Tells if the song is a *master* recording. */
    master: boolean
    /** An `Array` with the track count for each
     * instrument. */
    tracks_count: number[]
    /** An `Array` with all tracks panning values. */
    pans: number[]
    /** An `Array` with all tracks volume values. */
    vols: number[]
    /** The quantity of vocal parts. */
    vocal_parts: number
    mute_volume: number
    mute_volume_vocals: number
    /** The HO/PO threshold value.
     *
     * This value changes the behavior of Auto-HO/PO notes. */
    hopo_threshold: number
    song_scroll_speed: number
    /** The audio cue used on vocal percussion.
     * - - - -
     * * `sfx/tambourine_bank.milo` => Uses a tambourine as
     * vocal percussion, used as default.
     * - - - -
     * * `sfx/cowbell_bank.milo` => Uses a cowbell as vocal
     * percussion.
     * - - - -
     * * `sfx/handclap_bank.milo` => Hand clapping as vocal
     * percussion.
     * - - - -
     * * `sfx/cowbell3_bank.milo` => Uses a cowbell as vocal
     * percussion. Alternative cowbell uses on a few on-disc
     * Rock Band 3 songs.
     */
    bank:
        | 'sfx/tambourine_bank.milo'
        | 'sfx/cowbell_bank.milo'
        | 'sfx/handclap_bank.milo'
        | 'sfx/cowbell3_bank.milo'
        | string
    /** The drum audio cue used on drums (like Freestyle Mode).
     * - - - -
     * * `sfx/kit01_bank.milo` => Hard Rock Kit, used as default.
     * - - - -
     * * `sfx/kit02_bank.milo` => Arena Kit.
     * - - - -
     * * `sfx/kit03_bank.milo` => Vintage Kit.
     * - - - -
     * * `sfx/kit04_bank.milo` => Trashy Kit.
     * - - - -
     * * `sfx/kit05_bank.milo` => Electronic Kit.
     * - - - -
     */
    drum_bank:
        | 'sfx/kit01_bank.milo'
        | 'sfx/kit02_bank.milo'
        | 'sfx/kit03_bank.milo'
        | 'sfx/kit04_bank.milo'
        | 'sfx/kit05_bank.milo'
        | string
    anim_tempo: 16 | 32 | 64 | number
    /** The song length (in milliseconds). */
    song_length: number
    /** An `Array` with preview starting and ending time
     * (in milliseconds). */
    preview: [number, number]
    /** Ranking for Band */
    rank_band: number
    /** The song's genre. */
    genre: keyof DTAGenreTypes | string
    /** The gender of the lead vocalist. */
    vocal_gender: 'male' | 'female'
    version: number
    format: number
    /** a `boolean` value that tells if the custom
     * has an album artwork file to display. */
    album_art: boolean
    /** The year the song was released. */
    year_released: number
    /** The rating of the song.
     * - - - -
     * * `1` => Family Friendly
     * - - - -
     * * `2` => Supervision Recommended
     * - - - -
     * * `3` => Mature Content
     * - - - -
     * * `4` => No Rating
     * */
    rating: 1 | 2 | 3 | 4
    /** The sub-genre of the song. */
    sub_genre: keyof DTASubGenreTypes | string
    /** An unique song ID. Generally it's a number-only
     * ID. */
    song_id: string
    /** The quantity of tuning offset of the recording
     * (in cents). */
    tuning_offset_cents: number
    guide_pitch_volume: number
    /** The game's origin.
     *
     * Custom songs uses `ugc_plus` (it appears on the game's filtering
     * system as `Rock Band Network`, and `Custom Songs` on RB3DX).
     */
    game_origin: string
    encoding: string
    /** The name of the album. */
    album_name: string
    /** The track number of the song, related to the album. */
    album_track_number: number
}

export interface DTARawContentOptional {
    /** Ranking for Drums and PRO Drums. */
    rank_drum: number
    /** Ranking for Guitar. */
    rank_guitar: number
    /** Ranking for Bass. */
    rank_bass: number
    /** Ranking for Solo Vocals and Harmonies. */
    rank_vocals: number
    /** Ranking for Keys. */
    rank_keys: number
    /** Ranking for PRO Keys. */
    rank_real_keys: number
    /** Ranking for PRO Guitar. */
    rank_real_guitar: number
    /** Ranking for PRO Bass. */
    rank_real_bass: number
    /** An `Array` with each instrument flag that
     * has solo sessions. */
    solo: ('guitar' | 'bass' | 'drum' | 'keys' | 'vocal_percussion' | string)[]
    /** The year the song was recorded, this is used
     * on subsequent/alternative studio versions and
     * live performances. */
    year_recorded: number
    /** The vocal tonic note of the song,
     * used on the Vocal HUD and PRO modes
     * (if no `song_key` is specified to override it).
     *
     * Must be a `number` from 0 `C` to 11 `B`. */
    vocal_tonic_note: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | number
    /** The song's tonality.
     * - - - -
     * * `0` => Major.
     * - - - -
     * * `1` => Minor. */
    song_tonality: 0 | 1 | number
    /**
     * The song's key signature. It overrides the
     * `vocal_tonic_note` for PRO modes.
     *
     * This is generally used when the instrumental
     * part starts before the vocal, and when the vocalist
     * sings only when the whole song's key signature changes.
     *
     * `vocal_tonic_note` will only have effect on the Vocal HUD.
     *
     * Must be a `number` from 0 `C` to 11 `B`. */
    song_key: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | number
    /** An `Array` with each string tuning for PRO Guitar. */
    real_guitar_tuning: [number, number, number, number, number, number]
    /** An `Array` with each string tuning for PRO Bass. */
    real_bass_tuning: [number, number, number, number]
}

export interface DTACustomSongAttributes {
    /** The author of the song. */
    author?: string
    /** An `Array` with the languages of the song. */
    languages?: string[]
    /** Tells if the song has separate vocal and backing stems.*/
    karaoke?: boolean
    /** Tells if the song has separate audio stems. */
    multitrack?: boolean
    /** Tells if the song is a 2x Kick Pedal song. */
    doubleKick?: boolean
    /** Tells if the song is a conversion from another game. */
    convert?: boolean
    /** Tells if the song has rhythm guitar charted on the Keys track. */
    rhythmOnKeys?: boolean
    /** Tells if the song has rhythm guitar charted on the Bass track. */
    rhythmOnBass?: boolean
    /** Tells if the song has EMH autogenerated by CAT. */
    CATemh?: boolean
    /** Tells if the song only has Expert difficulty charted. */
    expertOnly?: boolean
}

export interface DTAGenreTypes {
    /** Alternative. */
    alternative: string
    /** Blues. */
    blues: string
    /** Classical. */
    classical: string
    /** Classic Rock. */
    classicrock: string
    /** Country. */
    country: string
    /** Emo. */
    emo: string
    /** Fusion. */
    fusion: string
    /** Glam. */
    glam: string
    /** Grunge. */
    grunge: string
    /** Hip-Hop/Rap. */
    hiphoprap: string
    /** Indie Rock. */
    indierock: string
    /** Inspirational. */
    inspirational: string
    /** Jazz. */
    jazz: string
    /** J-Rock. */
    jrock: string
    /** Latin. */
    latin: string
    /** Metal. */
    metal: string
    /** New Wave. */
    new_wave: string
    /** Novelty. */
    novelty: string
    /** Nu-Metal. */
    numetal: string
    /** Pop/Dance/Electronic. */
    popdanceelectronic: string
    /** Pop-Rock. */
    poprock: string
    /** Prog. */
    prog: string
    /** Punk. */
    punk: string
    /** R&B/Soul/Funk. */
    rbsoulfunk: string
    /** Reggae/Ska. */
    reggaeska: string
    /** Rock. */
    rock: string
    /** Southern Rock. */
    southernrock: string
    /** World. */
    world: string
    /** Other. */
    other: string
}

export interface DTASubGenreTypes {
    /** Alternative. */
    subgenre_alternative: string
    /** College. */
    subgenre_college: string
    /** Other. */
    subgenre_other: string
    /** Acoustic. */
    subgenre_acoustic: string
    /** Chicago. */
    subgenre_chicago: string
    /** Classic. */
    subgenre_classic: string
    /** Contemporary. */
    subgenre_contemporary: string
    /** Country. */
    subgenre_country: string
    /** Delta. */
    subgenre_delta: string
    /** Electric. */
    subgenre_electric: string
    /** Classical. */
    subgenre_classical: string
    /** Classic Rock. */
    subgenre_classicrock: string
    /** Bluegrass. */
    subgenre_bluegrass: string
    /** Honky Tonk. */
    subgenre_honkytonk: string
    /** Outlaw. */
    subgenre_outlaw: string
    /** Traditional Folk. */
    subgenre_traditionalfolk: string
    /** Emo. */
    subgenre_emo: string
    /** Fusion. */
    subgenre_fusion: string
    /** Glam. */
    subgenre_glam: string
    /** Goth. */
    subgenre_goth: string
    /** Grunge. */
    subgenre_grunge: string
    /** Alternative Rap. */
    subgenre_alternativerap: string
    /** Gangsta. */
    subgenre_gangsta: string
    /** Hardcore Rap. */
    subgenre_hardcorerap: string
    /** Hip Hop. */
    subgenre_hiphop: string
    /** Old School Hip Hop. */
    subgenre_oldschoolhiphop: string
    /** Rap. */
    subgenre_rap: string
    /** Trip Hop. */
    subgenre_triphop: string
    /** Underground Rap. */
    subgenre_undergroundrap: string
    /** Indie Rock. */
    subgenre_indierock: string
    /** Lo-fi. */
    subgenre_lofi: string
    /** Math Rock. */
    subgenre_mathrock: string
    /** Noise. */
    subgenre_noise: string
    /** Post Rock. */
    subgenre_postrock: string
    /** Shoegazing. */
    subgenre_shoegazing: string
    /** Inspirational. */
    subgenre_inspirational: string
    /** Acid Jazz. */
    subgenre_acidjazz: string
    /** Experimental. */
    subgenre_experimental: string
    /** Ragtime. */
    subgenre_ragtime: string
    /** Smooth. */
    subgenre_smooth: string
    /** J-Rock. */
    subgenre_jrock: string
    /** Latin. */
    subgenre_latin: string
    /** Black. */
    subgenre_black: string
    /** Core. */
    subgenre_core: string
    /** Death. */
    subgenre_death: string
    /** Hair. */
    subgenre_hair: string
    /** Industrial. */
    subgenre_industrial: string
    /** Metal. */
    subgenre_metal: string
    /** Power. */
    subgenre_power: string
    /** Prog. */
    subgenre_prog: string
    /** Speed. */
    subgenre_speed: string
    /** Thrash. */
    subgenre_thrash: string
    /** Dark Wave. */
    subgenre_darkwave: string
    /** Electroclash. */
    subgenre_electroclash: string
    /** New Wave. */
    subgenre_new_wave: string
    /** Synthpop. */
    subgenre_synth: string
    /** Novelty. */
    subgenre_novelty: string
    /** Nu-Metal. */
    subgenre_numetal: string
    /** Ambient. */
    subgenre_ambient: string
    /** Breakbeat. */
    subgenre_breakbeat: string
    /** Chiptune. */
    subgenre_chiptune: string
    /** Dance. */
    subgenre_dance: string
    /** Downtempo. */
    subgenre_downtempo: string
    /** Dub. */
    subgenre_dub: string
    /** Drum and Bass. */
    subgenre_drumandbass: string
    /** Electronica. */
    subgenre_electronica: string
    /** Garage. */
    subgenre_garage: string
    /** Hardcore Dance. */
    subgenre_hardcoredance: string
    /** House. */
    subgenre_house: string
    /** Techno. */
    subgenre_techno: string
    /** Trance. */
    subgenre_trance: string
    /** Pop. */
    subgenre_pop: string
    /** Soft Rock. */
    subgenre_softrock: string
    /** Teen. */
    subgenre_teen: string
    /** Prog Rock. */
    subgenre_progrock: string
    /** Dance Punk. */
    subgenre_dancepunk: string
    /** Hardcore. */
    subgenre_hardcore: string
    /** Disco. */
    subgenre_disco: string
    /** Funk. */
    subgenre_funk: string
    /** Motown. */
    subgenre_motown: string
    /** Rhythm and Blues. */
    subgenre_rhythmandblues: string
    /** Soul. */
    subgenre_soul: string
    /** Reggae. */
    subgenre_reggae: string
    /** Ska. */
    subgenre_ska: string
    /** Arena. */
    subgenre_arena: string
    /** Blues. */
    subgenre_blues: string
    /** Folk Rock. */
    subgenre_folkrock: string
    /** Hard Rock. */
    subgenre_hardrock: string
    /** Psychedelic. */
    subgenre_psychadelic: string
    /** Rock. */
    subgenre_rock: string
    /** Rockabilly. */
    subgenre_rockabilly: string
    /** Rock and Roll. */
    subgenre_rockandroll: string
    /** Surf. */
    subgenre_surf: string
    /** Southern Rock. */
    subgenre_southernrock: string
    /** World. */
    subgenre_world: string
    /** A capella. */
    subgenre_acapella: string
    /** Contemporary Folk. */
    subgenre_contemporaryfolk: string
    /** Oldies. */
    subgenre_oldies: string
}